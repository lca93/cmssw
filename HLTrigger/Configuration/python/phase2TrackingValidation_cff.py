import FWCore.ParameterSet.Config as cms

###########
##### Validation
###

from  Configuration.StandardSequences.Validation_cff import trackingParticleNumberOfLayersProducer as _trackingParticleNumberOfLayersProducer

trackingParticleNumberOfLayersProducer = _trackingParticleNumberOfLayersProducer.clone(simHits = ["g4SimHits:TrackerHitsPixelBarrelLowTof", "g4SimHits:TrackerHitsPixelEndcapLowTof"])
from Validation.RecoTrack.MultiTrackValidator_cfi import multiTrackValidator as _multiTrackValidator
trackValidatorGeneralTrackingOnly = _multiTrackValidator.clone()

trackValidatorGeneralTrackingOnly.beamSpot = cms.InputTag("offlineBeamSpot")
trackValidatorGeneralTrackingOnly.associators = cms.untracked.VInputTag("trackingParticleGeneralTrackAssociation"),
trackValidatorGeneralTrackingOnly.histoProducerAlgoBlock = cms.PSet(
        GpSelectorForEfficiencyVsEta = cms.PSet(
            chargedOnly = cms.bool(True),
            invertRapidityCut = cms.bool(False),
            lip = cms.double(30.0),
            maxPhi = cms.double(3.2),
            maxRapidity = cms.double(4),
            minPhi = cms.double(-3.2),
            minRapidity = cms.double(-4),
            pdgId = cms.vint32(),
            ptMin = cms.double(0.9),
            status = cms.int32(1),
            tip = cms.double(2.5)
        ),
        GpSelectorForEfficiencyVsPhi = cms.PSet(
            chargedOnly = cms.bool(True),
            invertRapidityCut = cms.bool(False),
            lip = cms.double(30.0),
            maxPhi = cms.double(3.2),
            maxRapidity = cms.double(4),
            minPhi = cms.double(-3.2),
            minRapidity = cms.double(-4),
            pdgId = cms.vint32(),
            ptMin = cms.double(0.9),
            status = cms.int32(1),
            tip = cms.double(2.5)
        ),
        GpSelectorForEfficiencyVsPt = cms.PSet(
            chargedOnly = cms.bool(True),
            invertRapidityCut = cms.bool(False),
            lip = cms.double(30.0),
            maxPhi = cms.double(3.2),
            maxRapidity = cms.double(4),
            minPhi = cms.double(-3.2),
            minRapidity = cms.double(-4),
            pdgId = cms.vint32(),
            ptMin = cms.double(0.05),
            status = cms.int32(1),
            tip = cms.double(2.5)
        ),
        GpSelectorForEfficiencyVsVTXR = cms.PSet(
            chargedOnly = cms.bool(True),
            invertRapidityCut = cms.bool(False),
            lip = cms.double(30.0),
            maxPhi = cms.double(3.2),
            maxRapidity = cms.double(4),
            minPhi = cms.double(-3.2),
            minRapidity = cms.double(-4),
            pdgId = cms.vint32(),
            ptMin = cms.double(0.9),
            status = cms.int32(1),
            tip = cms.double(2.5)
        ),
        GpSelectorForEfficiencyVsVTXZ = cms.PSet(
            chargedOnly = cms.bool(True),
            invertRapidityCut = cms.bool(False),
            lip = cms.double(35.0),
            maxPhi = cms.double(3.2),
            maxRapidity = cms.double(4),
            minPhi = cms.double(-3.2),
            minRapidity = cms.double(-4),
            pdgId = cms.vint32(),
            ptMin = cms.double(0.9),
            status = cms.int32(1),
            tip = cms.double(2.5)
        ),
        TpSelectorForEfficiencyVsEta = cms.PSet(
            chargedOnly = cms.bool(True),
            intimeOnly = cms.bool(False),
            invertRapidityCut = cms.bool(False),
            lip = cms.double(30.0),
            maxPhi = cms.double(3.2),
            maxRapidity = cms.double(4),
            minHit = cms.int32(0),
            minPhi = cms.double(-3.2),
            minRapidity = cms.double(-4),
            pdgId = cms.vint32(),
            ptMax = cms.double(1e+100),
            ptMin = cms.double(0.9),
            signalOnly = cms.bool(True),
            stableOnly = cms.bool(False),
            tip = cms.double(2.5)
        ),
        TpSelectorForEfficiencyVsPhi = cms.PSet(
            chargedOnly = cms.bool(True),
            intimeOnly = cms.bool(False),
            invertRapidityCut = cms.bool(False),
            lip = cms.double(30.0),
            maxPhi = cms.double(3.2),
            maxRapidity = cms.double(2.5),
            minHit = cms.int32(0),
            minPhi = cms.double(-3.2),
            minRapidity = cms.double(-2.5),
            pdgId = cms.vint32(),
            ptMax = cms.double(1e+100),
            ptMin = cms.double(0.9),
            signalOnly = cms.bool(True),
            stableOnly = cms.bool(False),
            tip = cms.double(3.5)
        ),
        TpSelectorForEfficiencyVsPt = cms.PSet(
            chargedOnly = cms.bool(True),
            intimeOnly = cms.bool(False),
            invertRapidityCut = cms.bool(False),
            lip = cms.double(30.0),
            maxPhi = cms.double(3.2),
            maxRapidity = cms.double(2.5),
            minHit = cms.int32(0),
            minPhi = cms.double(-3.2),
            minRapidity = cms.double(-2.5),
            pdgId = cms.vint32(),
            ptMax = cms.double(1e+100),
            ptMin = cms.double(0.05),
            signalOnly = cms.bool(True),
            stableOnly = cms.bool(False),
            tip = cms.double(3.5)
        ),
        TpSelectorForEfficiencyVsVTXR = cms.PSet(
            chargedOnly = cms.bool(True),
            intimeOnly = cms.bool(False),
            invertRapidityCut = cms.bool(False),
            lip = cms.double(30.0),
            maxPhi = cms.double(3.2),
            maxRapidity = cms.double(2.5),
            minHit = cms.int32(0),
            minPhi = cms.double(-3.2),
            minRapidity = cms.double(-2.5),
            pdgId = cms.vint32(),
            ptMax = cms.double(1e+100),
            ptMin = cms.double(0.9),
            signalOnly = cms.bool(True),
            stableOnly = cms.bool(False),
            tip = cms.double(60.0)
        ),
        TpSelectorForEfficiencyVsVTXZ = cms.PSet(
            chargedOnly = cms.bool(True),
            intimeOnly = cms.bool(False),
            invertRapidityCut = cms.bool(False),
            lip = cms.double(30.0),
            maxPhi = cms.double(3.2),
            maxRapidity = cms.double(2.5),
            minHit = cms.int32(0),
            minPhi = cms.double(-3.2),
            minRapidity = cms.double(-2.5),
            pdgId = cms.vint32(),
            ptMax = cms.double(1e+100),
            ptMin = cms.double(0.9),
            signalOnly = cms.bool(True),
            stableOnly = cms.bool(False),
            tip = cms.double(3.5)
        ),
        cotThetaRes_nbin = cms.int32(300),
        cotThetaRes_rangeMax = cms.double(0.02),
        cotThetaRes_rangeMin = cms.double(-0.02),
        doDzPVcutPlots = cms.untracked.bool(True),
        doMTDPlots = cms.untracked.bool(False),
        dxyDzZoom = cms.double(25),
        dxyRes_nbin = cms.int32(500),
        dxyRes_rangeMax = cms.double(0.1),
        dxyRes_rangeMin = cms.double(-0.1),
        dzRes_nbin = cms.int32(150),
        dzRes_rangeMax = cms.double(0.05),
        dzRes_rangeMin = cms.double(-0.05),
        generalGpSelector = cms.PSet(
            chargedOnly = cms.bool(True),
            invertRapidityCut = cms.bool(False),
            lip = cms.double(30.0),
            maxPhi = cms.double(3.2),
            maxRapidity = cms.double(4),
            minPhi = cms.double(-3.2),
            minRapidity = cms.double(-4),
            pdgId = cms.vint32(),
            ptMin = cms.double(0.9),
            status = cms.int32(1),
            tip = cms.double(2.5)
        ),
        generalTpSelector = cms.PSet(
            chargedOnly = cms.bool(True),
            intimeOnly = cms.bool(False),
            invertRapidityCut = cms.bool(False),
            lip = cms.double(30.0),
            maxPhi = cms.double(3.2),
            maxRapidity = cms.double(4),
            minHit = cms.int32(0),
            minPhi = cms.double(-3.2),
            minRapidity = cms.double(-4),
            pdgId = cms.vint32(),
            ptMax = cms.double(1e+100),
            ptMin = cms.double(0.9),
            signalOnly = cms.bool(True),
            stableOnly = cms.bool(False),
            tip = cms.double(2.5)
        ),
        maxChi2 = cms.double(20),
        maxDeDx = cms.double(10.0),
        maxDxy = cms.double(25),
        maxDz = cms.double(30),
        maxDzpvCumulative = cms.double(0.6),
        maxDzpvsigCumulative = cms.double(10),
        maxEta = cms.double(3),
        maxHit = cms.double(80.5),
        maxLayers = cms.double(25.5),
        maxMVA = cms.double(1),
        maxPVz = cms.double(60),
        maxPhi = cms.double(3.1416),
        maxPt = cms.double(1000),
        maxPu = cms.double(259.5),
        maxTracks = cms.double(2000),
        maxVertcount = cms.double(160.5),
        maxVertpos = cms.double(100),
        maxZpos = cms.double(30),
        maxdr = cms.double(1),
        maxdrj = cms.double(0.5),
        minChi2 = cms.double(0),
        minDeDx = cms.double(0.0),
        minDxy = cms.double(-25),
        minDz = cms.double(-30),
        minEta = cms.double(-3),
        minHit = cms.double(-0.5),
        minLayers = cms.double(-0.5),
        minMVA = cms.double(-1),
        minPVz = cms.double(-60),
        minPhi = cms.double(-3.1416),
        minPt = cms.double(0.1),
        minPu = cms.double(-0.5),
        minTracks = cms.double(0),
        minVertcount = cms.double(-0.5),
        minVertpos = cms.double(0.01),
        minZpos = cms.double(-30),
        mindr = cms.double(0.001),
        mindrj = cms.double(0.001),
        nintChi2 = cms.int32(40),
        nintDeDx = cms.int32(40),
        nintDxy = cms.int32(100),
        nintDz = cms.int32(60),
        nintDzpvCumulative = cms.int32(240),
        nintDzpvsigCumulative = cms.int32(200),
        nintEta = cms.int32(60),
        nintHit = cms.int32(81),
        nintLayers = cms.int32(26),
        nintMVA = cms.int32(100),
        nintPVz = cms.int32(120),
        nintPhi = cms.int32(36),
        nintPt = cms.int32(40),
        nintPu = cms.int32(130),
        nintTracks = cms.int32(200),
        nintVertcount = cms.int32(161),
        nintVertpos = cms.int32(40),
        nintZpos = cms.int32(60),
        nintdr = cms.int32(100),
        nintdrj = cms.int32(100),
        phiRes_nbin = cms.int32(300),
        phiRes_rangeMax = cms.double(0.01),
        phiRes_rangeMin = cms.double(-0.01),
        ptRes_nbin = cms.int32(100),
        ptRes_rangeMax = cms.double(0.1),
        ptRes_rangeMin = cms.double(-0.1),
        seedingLayerSets = cms.vstring(
            'BPix1+BPix2+BPix3+BPix4',
            'BPix1+BPix2+BPix3+FPix1_pos',
            'BPix1+BPix2+BPix3+FPix1_neg',
            'BPix1+BPix2+FPix1_pos+FPix2_pos',
            'BPix1+BPix2+FPix1_neg+FPix2_neg',
            'BPix1+FPix1_pos+FPix2_pos+FPix3_pos',
            'BPix1+FPix1_neg+FPix2_neg+FPix3_neg',
            'BPix1+BPix2+BPix3',
            'BPix2+BPix3+BPix4',
            'BPix1+BPix3+BPix4',
            'BPix1+BPix2+BPix4',
            'BPix2+BPix3+FPix1_pos',
            'BPix2+BPix3+FPix1_neg',
            'BPix1+BPix2+FPix1_pos',
            'BPix1+BPix2+FPix1_neg',
            'BPix1+BPix3+FPix1_pos',
            'BPix1+BPix3+FPix1_neg',
            'BPix2+FPix1_pos+FPix2_pos',
            'BPix2+FPix1_neg+FPix2_neg',
            'BPix1+FPix1_pos+FPix2_pos',
            'BPix1+FPix1_neg+FPix2_neg',
            'BPix1+BPix2+FPix2_pos',
            'BPix1+BPix2+FPix2_neg',
            'FPix1_pos+FPix2_pos+FPix3_pos',
            'FPix1_neg+FPix2_neg+FPix3_neg',
            'BPix1+FPix2_pos+FPix3_pos',
            'BPix1+FPix2_neg+FPix3_neg',
            'BPix1+FPix1_pos+FPix3_pos',
            'BPix1+FPix1_neg+FPix3_neg',
            'BPix1+BPix2',
            'BPix1+BPix3',
            'BPix2+BPix3',
            'BPix1+FPix1_pos',
            'BPix1+FPix1_neg',
            'BPix2+FPix1_pos',
            'BPix2+FPix1_neg',
            'BPix1+BPix4',
            'BPix2+BPix4',
            'BPix3+BPix4',
            'BPix1+FPix2_pos',
            'BPix1+FPix2_neg',
            'BPix1+FPix3_pos',
            'BPix1+FPix3_neg',
            'BPix2+FPix2_pos',
            'BPix2+FPix2_neg',
            'BPix3+FPix1_pos',
            'BPix3+FPix1_neg',
            'FPix1_pos+FPix2_pos',
            'FPix1_neg+FPix2_neg',
            'FPix1_pos+FPix3_pos',
            'FPix1_neg+FPix3_neg',
            'FPix2_pos+FPix3_pos',
            'FPix2_neg+FPix3_neg',
            'BPix3+BPix4+TIB1',
            'TIB1+TIB2+MTIB3',
            'TIB1+TIB2+MTIB4',
            'TIB1+TIB2+MTID1_pos',
            'TIB1+TIB2+MTID1_neg',
            'TID1_pos+TID2_pos+TID3_pos',
            'TID1_neg+TID2_neg+TID3_neg',
            'TID1_pos+TID2_pos+MTID3_pos',
            'TID1_neg+TID2_neg+MTID3_neg',
            'TID1_pos+TID2_pos+MTEC1_pos',
            'TID1_neg+TID2_neg+MTEC1_neg',
            'TID2_pos+TID3_pos+TEC1_pos',
            'TID2_neg+TID3_neg+TEC1_neg',
            'TID2_pos+TID3_pos+MTEC1_pos',
            'TID2_neg+TID3_neg+MTEC1_neg',
            'TEC1_pos+TEC2_pos+TEC3_pos',
            'TEC1_neg+TEC2_neg+TEC3_neg',
            'TEC1_pos+TEC2_pos+MTEC3_pos',
            'TEC1_neg+TEC2_neg+MTEC3_neg',
            'TEC1_pos+TEC2_pos+TEC4_pos',
            'TEC1_neg+TEC2_neg+TEC4_neg',
            'TEC1_pos+TEC2_pos+MTEC4_pos',
            'TEC1_neg+TEC2_neg+MTEC4_neg',
            'TEC2_pos+TEC3_pos+TEC4_pos',
            'TEC2_neg+TEC3_neg+TEC4_neg',
            'TEC2_pos+TEC3_pos+MTEC4_pos',
            'TEC2_neg+TEC3_neg+MTEC4_neg',
            'TEC2_pos+TEC3_pos+TEC5_pos',
            'TEC2_neg+TEC3_neg+TEC5_neg',
            'TEC2_pos+TEC3_pos+TEC6_pos',
            'TEC2_neg+TEC3_neg+TEC6_neg',
            'TEC3_pos+TEC4_pos+TEC5_pos',
            'TEC3_neg+TEC4_neg+TEC5_neg',
            'TEC3_pos+TEC4_pos+MTEC5_pos',
            'TEC3_neg+TEC4_neg+MTEC5_neg',
            'TEC3_pos+TEC5_pos+TEC6_pos',
            'TEC3_neg+TEC5_neg+TEC6_neg',
            'TEC4_pos+TEC5_pos+TEC6_pos',
            'TEC4_neg+TEC5_neg+TEC6_neg',
            'TOB1+TEC1_pos',
            'TOB1+TEC1_neg',
            'TEC1_pos+TEC2_pos',
            'TEC1_neg+TEC2_neg',
            'TEC2_pos+TEC3_pos',
            'TEC2_neg+TEC3_neg',
            'TEC3_pos+TEC4_pos',
            'TEC3_neg+TEC4_neg',
            'TEC4_pos+TEC5_pos',
            'TEC4_neg+TEC5_neg',
            'TEC5_pos+TEC6_pos',
            'TEC5_neg+TEC6_neg',
            'TEC6_pos+TEC7_pos',
            'TEC6_neg+TEC7_neg',
            'TOB1+TOB2+MTOB3',
            'TOB1+TOB2+MTOB4',
            'TOB1+TOB2+MTEC1_pos',
            'TOB1+TOB2+MTEC1_neg',
            'BPix4+TIB1',
            'BPix4+TIB2'
        ),
        useFabsEta = cms.bool(False),
        useInvPt = cms.bool(False),
        useLogPt = cms.untracked.bool(True),
        useLogVertpos = cms.untracked.bool(True)
    )
trackValidatorGeneralTrackingOnly.label = cms.VInputTag("generalTracks")
trackValidatorGeneralTrackingOnly.label_tp_nlayers = cms.InputTag("trackingParticleNumberOfLayersProducer","trackerLayers")
trackValidatorGeneralTrackingOnly.label_tp_npixellayers = cms.InputTag("trackingParticleNumberOfLayersProducer","pixelLayers")
trackValidatorGeneralTrackingOnly.label_tp_nstripstereolayers = cms.InputTag("trackingParticleNumberOfLayersProducer","stripStereoLayers")
trackValidatorGeneralTrackingOnly.label_tv = cms.InputTag("mix","MergedTrackTruth")
trackValidatorGeneralTrackingOnly.label_vertex = cms.untracked.InputTag("pixelVertices")
trackValidatorGeneralTrackingOnly.ptMaxTP = cms.double(1e+100)
trackValidatorGeneralTrackingOnly.ptMinTP = cms.double(0.005)
trackValidatorGeneralTrackingOnly.tipTP = cms.double(60)
trackValidatorGeneralTrackingOnly.trackCollectionForDrCalculation = cms.InputTag("generalTracks")
trackValidatorGeneralTrackingOnly.vertexAssociator = cms.untracked.InputTag("VertexAssociatorByPositionAndTracks")

trackValidatorPixelTrackingOnly = trackValidatorGeneralTrackingOnly.clone()
trackValidatorPixelTrackingOnly.associators = cms.untracked.VInputTag("trackingParticlePixelTrackAssociation")
trackValidatorPixelTrackingOnly.label = cms.VInputTag("pixelTracks")
trackValidatorPixelTrackingOnly.trackCollectionForDrCalculation = cms.InputTag("pixelTracks")
trackValidatorPixelTrackingOnly.vertexAssociator = cms.untracked.InputTag("VertexAssociatorByPositionAndTracksPixel")

from SimTracker.VertexAssociation.VertexAssociatorByPositionAndTracks_cfi import VertexAssociatorByPositionAndTracks as _VertexAssociatorByPositionAndTracks

VertexAssociatorByPositionAndTracksPixel = _VertexAssociatorByPositionAndTracks.clone()
VertexAssociatorByPositionAndTracksPixel.trackAssociation = cms.InputTag("trackingParticlePixelTrackAssociation")

VertexAssociatorByPositionAndTracks = _VertexAssociatorByPositionAndTracks.clone()
VertexAssociatorByPositionAndTracks.trackAssociation = cms.InputTag("trackingParticleGeneralTrackAssociation")

from SimTracker.TrackAssociation.trackingParticleRecoTrackAsssociation_cfi import trackingParticleRecoTrackAsssociation as _trackingParticleRecoTrackAssociation

trackingParticlePixelTrackAssociation = _trackingParticleRecoTrackAssociation.clone()
trackingParticlePixelTrackAssociation.label_tr = cms.InputTag("pixelTracks")

trackingParticleGeneralTrackAssociation = _trackingParticleRecoTrackAssociation.clone()
trackingParticleGeneralTrackAssociation.label_tr = cms.InputTag("generalTracks")


from Validation.RecoVertex.PrimaryVertexAnalyzer4PUSlimmed_cfi import vertexAnalysis as _vertexAnalysis

vertexAnalysis = _vertexAnalysis.clone()
vertexAnalysis.nPUbins = cms.uint32(130)
vertexAnalysis.trackAssociatorMap = cms.untracked.InputTag("trackingParticleGeneralTrackAssociation")
vertexAnalysis.vertexRecoCollections = cms.VInputTag("offlinePrimaryVertices")

from SimTracker.TrackAssociatorProducers.quickTrackAssociatorByHits_cfi import quickTrackAssociatorByHits as _quickTrackAssociatorByHits

quickTrackAssociatorByHits = _quickTrackAssociatorByHits.clone()

from SimTracker.TrackerHitAssociation.tpClusterProducer_cfi import tpClusterProducer as _tpClusterProducer
tpClusterProducer = _tpClusterProducer.clone()

###########
##### DQM
###

import FWCore.ParameterSet.Config as cms

from DQMOffline.Configuration.DQMOfflineMC_cff import TrackSplitMonitor, dqmInfoTracking, TrackSeedMoninitialStep, TrackSeedMonhighPtTripletStep
from DQMOffline.Configuration.DQMOfflineMC_cff import TrackerCollisionSelectedTrackMonCommonhighPurityPV0p1, TrackerCollisionSelectedTrackMonCommongeneralTracks
from DQMOffline.Configuration.DQMOfflineMC_cff import TrackerCollisionSelectedTrackMonCommonhighPurityPt1, TrackerCollisionSelectedTrackMonCommonhighPurityPtRange0to1
from DQM.TrackingMonitorSource.TrackingSourceConfigP5_cff import TrackMon_gentk
from DQM.TrackingMonitorSource.TrackingSourceConfig_Tier0_cff import dqmInfoTracking
from DQM.TrackingMonitor.TrackSplittingMonitor_cfi import TrackSplitMonitor

DQMStore = cms.Service("DQMStore")

TrackerCollisionSelectedTrackMonCommongeneralTracks = cms.EDProducer("TrackingMonitor",
**dict(
    [
        ("AbsDxyBin" , cms.int32(120) ),
        ("AbsDxyMax" , cms.double(60.0) ),
        ("AbsDxyMin" , cms.double(0.0) ),
        ("AlgoName" , cms.string('GenTk') ),
        ("BSFolderName" , cms.string('Tracking/ParametersVsBeamSpot') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(199.5) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(80) ),
        ("Chi2NDFMax" , cms.double(79.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring(
        'Tot',
        'Strip',
        'Pix'
    ) ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyErrBin" , cms.int32(200) ),
        ("DxyErrMax" , cms.double(0.1) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("Eta2DBin" , cms.int32(26) ),
        ("EtaBin" , cms.int32(46) ),
        ("EtaMax" , cms.double(4.5) ),
        ("EtaMin" , cms.double(-4.5) ),
        ("FolderName" , cms.string('Tracking/TrackParameters/generaltracks') ),
        ("GoodPVtxBin" , cms.int32(60) ),
        ("GoodPVtxMax" , cms.double(60.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LUMIBin" , cms.int32(700) ),
        ("LUMIMax" , cms.double(70000.0) ),
        ("LUMIMin" , cms.double(0.0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MVABin" , cms.int32(100) ),
        ("MVAMax" , cms.double(1) ),
        ("MVAMin" , cms.double(-1) ),
        ("MVAProducers" , cms.vstring(
        'initialStepClassifier1',
        'initialStepClassifier2'
    ) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('ImpactPoint') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(49999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(199999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("PVBin" , cms.int32(125) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices/generaltracks') ),
        ("PVMax" , cms.double(249.5) ),
        ("PVMin" , cms.double(-0.5) ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("Phi2DBin" , cms.int32(32) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(25) ),
        ("RecLayMax" , cms.double(24.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("RegionCandidatePtBin" , cms.int32(100) ),
        ("RegionCandidatePtMax" , cms.double(1000) ),
        ("RegionCandidatePtMin" , cms.double(0) ),
        ("RegionCandidates" , cms.InputTag("") ),
        ("RegionProducer" , cms.InputTag("") ),
        ("RegionSeedingLayersProducer" , cms.InputTag("") ),
        ("RegionSizeBin" , cms.int32(20) ),
        ("RegionSizeMax" , cms.double(19.5) ),
        ("RegionSizeMin" , cms.double(-0.5) ),
        ("SeedCandBin" , cms.int32(20) ),
        ("SeedCandMax" , cms.double(19.5) ),
        ("SeedCandMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("initialStepSeeds") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("initialStepTrackCandidates") ),
        ("TCSizeBin" , cms.int32(100) ),
        ("TCSizeMax" , cms.double(499.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(100) ),
        ("TkSeedSizeMax" , cms.double(499.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(200) ),
        ("TkSizeMax" , cms.double(999.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100.0) ),
        ("TrackPMin" , cms.double(0.0) ),
        ("TrackProducer" , cms.InputTag("generalTracks") ),
        ("TrackProducerForMVA" , cms.InputTag("initialStepTracks") ),
        ("TrackPt2DBin" , cms.int32(100) ),
        ("TrackPtBin" , cms.int32(100) ),
        ("TrackPtMax" , cms.double(100.0) ),
        ("TrackPtMin" , cms.double(0.0) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("generalTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string('') ),
        ("doAllPlots" , cms.bool(False) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(True) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doEffFromHitPatternVsBX" , cms.bool(False) ),
        ("doEffFromHitPatternVsLUMI" , cms.bool(False) ),
        ("doEffFromHitPatternVsPU" , cms.bool(True) ),
        ("doGeneralPropertiesPlots" , cms.bool(True) ),
        ("doGoodTrackLayersVsPhiVsEtaPerTrack" , cms.bool(True) ),
        ("doGoodTrackPlots" , cms.bool(True) ),
        ("doGoodTrackRecHitVsPhiVsEtaPerTrack" , cms.bool(True) ),
    ] +
    [
        ("doGoodTracksPlots" , cms.bool(True) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(True) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(True) ),
        ("doLumiAnalysis" , cms.bool(True) ),
        ("doMVAPlots" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBX" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPlotsVsLUMI" , cms.bool(False) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(True) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(True) ),
        ("doRecHitVsPtVsEtaPerTrack" , cms.bool(True) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doRegionCandidatePlots" , cms.bool(False) ),
        ("doRegionPlots" , cms.bool(False) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doStopSource" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
        ("doTrackerSpecific" , cms.bool(True) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
        ("etaErrMin" , cms.double(0.0) ),
        ("genericTriggerEventPSet" , cms.PSet(
        andOr = cms.bool(False),
        andOrDcs = cms.bool(False),
        dcsInputTag = cms.InputTag("scalersRawToDigi"), dcsRecordInputTag = cms.InputTag("onlineMetaDataDigis"),
        dcsPartitions = cms.vint32(
            24, 25, 26, 27, 28,
            29
        ),
        errorReplyDcs = cms.bool(True)
    ) ),
        ("minNumberOfPixelsPerCluster" , cms.int32(2) ),
        ("minPixelClusterCharge" , cms.double(15000.0) ),
        ("numCut" , cms.string("quality(\'highPurity\')") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("pixelCluster4lumi" , cms.InputTag("siPixelClustersPreSplitting") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag(cms.InputTag("offlinePrimaryVertices")) ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring('offline') ),
        ("pvNDOF" , cms.int32(4) ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("scal" , cms.InputTag("scalersRawToDigi") ),
        ("forceSCAL", cms.bool(True)),
        ("metadata",cms.InputTag('onlineMetaDataDigis')),
        ("selPrimaryVertexInputTags" , cms.VInputTag(cms.InputTag("goodOfflinePrimaryVertices")) ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring(
        'TIB',
        'TOB',
        'TID',
        'TEC',
        'PixBarrel',
        'PixEndcap',
        'Pixel',
        'Strip'
    ) ),
        ("useBPixLayer1" , cms.bool(False) ),
        ]
    )
)

TrackMon_ckf = cms.EDProducer("TrackEfficiencyMonitor",
    AlgoName = cms.string('CKFTk'),
    FolderName = cms.string('Tracking/TrackParameters'),
    OutputFileName = cms.string('MonitorTrackEfficiency.root'),
    OutputMEsInRootFile = cms.bool(False),
    STATrackCollection = cms.InputTag("cosmicMuons"),
    TKTrackCollection = cms.InputTag("generaltracks"),
    deltaXBin = cms.int32(50),
    deltaXMax = cms.double(100),
    deltaXMin = cms.double(-100),
    deltaYBin = cms.int32(50),
    deltaYMax = cms.double(100),
    deltaYMin = cms.double(-100),
    isBFieldOff = cms.bool(False),
    muonCompatibleLayersBin = cms.int32(10),
    muonCompatibleLayersMax = cms.double(30),
    muonCompatibleLayersMin = cms.double(0),
    muonD0Bin = cms.int32(50),
    muonD0Max = cms.double(100),
    muonD0Min = cms.double(-100),
    muonEtaBin = cms.int32(50),
    muonEtaMax = cms.double(3.2),
    muonEtaMin = cms.double(-3.2),
    muonPhiBin = cms.int32(50),
    muonPhiMax = cms.double(0.0),
    muonPhiMin = cms.double(-3.2),
    muonXBin = cms.int32(50),
    muonXMax = cms.double(100),
    muonXMin = cms.double(-100),
    muonYBin = cms.int32(50),
    muonYMax = cms.double(100),
    muonYMin = cms.double(-100),
    muonZBin = cms.int32(50),
    muonZMax = cms.double(500),
    muonZMin = cms.double(-500),
    muoncoll = cms.InputTag("muons"),
    signDeltaXBin = cms.int32(50),
    signDeltaXMax = cms.double(5),
    signDeltaXMin = cms.double(-5),
    signDeltaYBin = cms.int32(50),
    signDeltaYMax = cms.double(5),
    signDeltaYMin = cms.double(-5),
    theMaxZ = cms.double(110.0),
    theRadius = cms.double(85.0),
    trackCompatibleLayersBin = cms.int32(10),
    trackCompatibleLayersMax = cms.double(30),
    trackCompatibleLayersMin = cms.double(0),
    trackD0Bin = cms.int32(50),
    trackD0Max = cms.double(100),
    trackD0Min = cms.double(-100),
    trackEfficiency = cms.bool(True),
    trackEtaBin = cms.int32(50),
    trackEtaMax = cms.double(3.2),
    trackEtaMin = cms.double(-3.2),
    trackPhiBin = cms.int32(50),
    trackPhiMax = cms.double(0.0),
    trackPhiMin = cms.double(-3.2),
    trackXBin = cms.int32(50),
    trackXMax = cms.double(100),
    trackXMin = cms.double(-100),
    trackYBin = cms.int32(50),
    trackYMax = cms.double(100),
    trackYMin = cms.double(-100),
    trackZBin = cms.int32(50),
    trackZMax = cms.double(500),
    trackZMin = cms.double(-500)
)

pvMonitor = cms.EDProducer("PrimaryVertexMonitor",
    AlignmentLabel = cms.string('Alignment'),
    DxyBin = cms.int32(100),
    DxyMax = cms.double(5000.0),
    DxyMin = cms.double(-5000.0),
    DzBin = cms.int32(100),
    DzMax = cms.double(2000.0),
    DzMin = cms.double(-2000.0),
    EtaBin = cms.int32(31),
    EtaBin2D = cms.int32(8),
    EtaMax = cms.double(3.0),
    EtaMin = cms.double(-3.0),
    PhiBin = cms.int32(32),
    PhiBin2D = cms.int32(12),
    PhiMax = cms.double(3.141592654),
    PhiMin = cms.double(-3.141592654),
    TkSizeBin = cms.int32(100),
    TkSizeMax = cms.double(499.5),
    TkSizeMin = cms.double(-0.5),
    TopFolderName = cms.string('OfflinePV'),
    Xpos = cms.double(0.1),
    Ypos = cms.double(0.0),
    beamSpotLabel = cms.InputTag("offlineBeamSpot"),
    ndof = cms.int32(4),
    useHPforAlignmentPlots = cms.bool(True),
    vertexLabel = cms.InputTag("")
)

ntrk2d = cms.PSet(NTrk2DBin = cms.int32(50), NTrk2DMax = cms.double(1999.5), NTrk2DMin = cms.double(-0.5))

TrackSeedMonhighPtTripletStep.NTrk2D = ntrk2d
TrackerCollisionSelectedTrackMonCommongeneralTracks.NTrk2D = ntrk2d
TrackSeedMoninitialStep.NTrk2D = ntrk2d
TrackerCollisionSelectedTrackMonCommonhighPurityPV0p1.NTrk2D = ntrk2d
TrackerCollisionSelectedTrackMonCommonhighPurityPt1.NTrk2D = ntrk2d
TrackerCollisionSelectedTrackMonCommonhighPurityPtRange0to1.NTrk2D = ntrk2d

gooppvtx_60 = cms.PSet(GoodPVtxBin = cms.int32(60),GoodPVtxMax = cms.double(60.0),GoodPVtxMin = cms.double(0.0))
gooppvtx_200 = cms.PSet(GoodPVtxBin = cms.int32(200),GoodPVtxMax = cms.double(200.0),GoodPVtxMin = cms.double(0.0))
npvtx = cms.PSet(NTrkPVtxBin = cms.int32(200), NTrkPVtxMin = cms.double( 0.), NTrkPVtxMax = cms.double(200.))
sumptvtx = cms.PSet(SumPtPVtxBin = cms.int32(200), SumPtPVtxMin = cms.double( 0.), SumPtPVtxMax = cms.double(1000.))

TrackerCollisionSelectedTrackMonCommonhighPurityPtRange0to1.GoodPVtx = gooppvtx_60
TrackerCollisionSelectedTrackMonCommonhighPurityPt1.GoodPVtx = gooppvtx_200
TrackSeedMonhighPtTripletStep.GoodPVtx = gooppvtx_200
TrackSeedMoninitialStep.GoodPVtx = gooppvtx_200
TrackerCollisionSelectedTrackMonCommonhighPurityPV0p1.GoodPVtx = gooppvtx_60
TrackerCollisionSelectedTrackMonCommongeneralTracks.GoodPVtx = gooppvtx_60

TrackerCollisionSelectedTrackMonCommonhighPurityPtRange0to1.SumPtPVtx = sumptvtx
TrackerCollisionSelectedTrackMonCommonhighPurityPt1.SumPtPVtx = sumptvtx
TrackSeedMonhighPtTripletStep.SumPtPVtx = sumptvtx
TrackSeedMoninitialStep.SumPtPVtx = sumptvtx
TrackerCollisionSelectedTrackMonCommonhighPurityPV0p1.SumPtPVtx = sumptvtx
TrackerCollisionSelectedTrackMonCommongeneralTracks.SumPtPVtx = sumptvtx

TrackerCollisionSelectedTrackMonCommonhighPurityPtRange0to1.NTrkPVtx = npvtx
TrackerCollisionSelectedTrackMonCommonhighPurityPt1.NTrkPVtx = npvtx
TrackSeedMonhighPtTripletStep.NTrkPVtx = npvtx
TrackSeedMoninitialStep.NTrkPVtx = npvtx
TrackerCollisionSelectedTrackMonCommonhighPurityPV0p1.NTrkPVtx = npvtx
TrackerCollisionSelectedTrackMonCommongeneralTracks.NTrkPVtx = npvtx

TrackMon_gentk  = TrackMon_gentk.clone()
TrackSplitMonitor = TrackSplitMonitor.clone()
dqmInfoTracking = dqmInfoTracking.clone()
